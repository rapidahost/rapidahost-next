// /lib/paypal/verifySignature.ts

import crypto from 'crypto'
import { NextApiRequest } from 'next'

export async function verifyPayPalWebhookSignature(req: NextApiRequest): Promise<boolean> {
  try {
    const transmissionId = req.headers['paypal-transmission-id'] as string
    const transmissionTime = req.headers['paypal-transmission-time'] as string
    const certUrl = req.headers['paypal-cert-url'] as string
    const authAlgo = req.headers['paypal-auth-algo'] as string
    const transmissionSig = req.headers['paypal-transmission-sig'] as string
    const webhookId = process.env.PAYPAL_WEBHOOK_ID as string

    const rawBody = await getRawBody(req)

    const body = JSON.stringify(JSON.parse(rawBody)) // ensure compact form

    const expectedSig = await generateExpectedSignature({
      authAlgo,
      certUrl,
      transmissionId,
      transmissionTime,
      webhookId,
      body
    })

    return transmissionSig === expectedSig
  } catch (err) {
    console.error('PayPal signature verification failed', err)
    return false
  }
}

async function getRawBody(req: NextApiRequest): Promise<string> {
  return new Promise((resolve, reject) => {
    let data = ''
    req.on('data', chunk => {
      data += chunk
    })
    req.on('end', () => {
      resolve(data)
    })
    req.on('error', reject)
  })
}

async function generateExpectedSignature({
  authAlgo,
  certUrl,
  transmissionId,
  transmissionTime,
  webhookId,
  body
}: {
  authAlgo: string
  certUrl: string
  transmissionId: string
  transmissionTime: string
  webhookId: string
  body: string
}): Promise<string> {
  // PayPal recommends using their SDK or API to verify the signature.
  // For actual production use, call PayPal API here instead.
  // This mock simply returns a fake value for development.
  return 'mocked-signature-for-development-only'
}
