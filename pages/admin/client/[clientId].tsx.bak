// ... (‡πÇ‡∏Ñ‡πâ‡∏î‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
const [servicesTab, setServicesTab] = useState<'services' | 'emails'>('services');
const [emailPage, setEmailPage] = useState(1);
const [emailStatusFilter, setEmailStatusFilter] = useState('');
const itemsPerPage = 5;

const emailLogs = (client.emails || []).filter(email =>
  !emailStatusFilter || email.status === emailStatusFilter
);
const paginatedEmails = emailLogs.slice((emailPage - 1) * itemsPerPage, emailPage * itemsPerPage);

// üì§ Export Filtered Email Logs to CSV
const exportEmailCSV = () => {
  const csv = [
    ['Type', 'To', 'Status', 'Timestamp'].join(',')
  ];
  emailLogs.forEach(email => {
    csv.push([
      email.type,
      email.to,
      email.status,
      new Date(email.timestamp).toLocaleString()
    ].map(v => `"${v}"`).join(','));
  });
  const blob = new Blob([csv.join('\n')], { type: 'text/csv' });
  const url = URL.createObjectURL(blob);
  const link = document.createElement('a');
  link.href = url;
  link.download = 'email_logs_filtered.csv';
  link.click();
};

const retryEmail = async (messageId: string) => {
  const reason = prompt('Enter reason for retry:');
  if (!reason) return;
  try {
    await fetch('/api/email/retry', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ messageId, reason })
    });
    alert('Retry requested');
  } catch (err) {
    alert('Retry failed');
  }
};

{servicesTab === 'emails' && (
  <div className="overflow-x-auto space-y-3">
    <div className="flex justify-between items-center">
      <div className="text-sm font-medium">Total: {emailLogs.length} emails</div>
      <div className="flex gap-2 items-center">
        <select
          value={emailStatusFilter}
          onChange={(e) => { setEmailStatusFilter(e.target.value); setEmailPage(1); }}
          className="text-sm border px-2 py-1 rounded"
        >
          <option value="">All Status</option>
          <option value="Sent">Sent</option>
          <option value="Failed">Failed</option>
          <option value="Opened">Opened</option>
          <option value="Clicked">Clicked</option>
          <option value="Retried">Retried</option>
        </select>
        <button
          onClick={exportEmailCSV}
          className="text-sm bg-gray-100 hover:bg-gray-200 border rounded px-3 py-1"
        >Export CSV</button>
      </div>
    </div>
    <table className="w-full text-sm border">
      <thead>
        <tr className="bg-gray-100 text-left">
          <th className="p-2 border">Type</th>
          <th className="p-2 border">To</th>
          <th className="p-2 border">Status</th>
          <th className="p-2 border">Date</th>
          <th className="p-2 border">Actions</th>
        </tr>
      </thead>
      <tbody>
        {paginatedEmails.map((email: any, i: number) => (
          <tr key={i} className="border-t">
            <td className="p-2 border">{email.type}</td>
            <td className="p-2 border">{email.to}</td>
            <td className="p-2 border">{email.status === 'Retried' ? 'üîÅ Retried' : email.status}</td>
            <td className="p-2 border">{new Date(email.timestamp).toLocaleString()}</td>
            <td className="p-2 border space-x-2">
              <Link href={`/admin/email/${email.messageId}`} className="text-blue-600 underline">View</Link>
              <Link href={`/admin/client/${client.id}?tab=invoices`} className="text-gray-600 underline">Invoice</Link>
              <button onClick={() => retryEmail(email.messageId)} className="text-orange-600 underline">Retry</button>
            </td>
          </tr>
        ))}
      </tbody>
    </table>
    <div className="flex justify-between text-sm mt-2">
      <button disabled={emailPage === 1} onClick={() => setEmailPage(emailPage - 1)} className="px-3 py-1 rounded border bg-white disabled:opacity-50">‚Üê Prev</button>
      <div>Page {emailPage} of {Math.ceil(emailLogs.length / itemsPerPage)}</div>
      <button disabled={emailPage * itemsPerPage >= emailLogs.length} onClick={() => setEmailPage(emailPage + 1)} className="px-3 py-1 rounded border bg-white disabled:opacity-50">Next ‚Üí</button>
    </div>
  </div>
)}

// ... (‡πÇ‡∏Ñ‡πâ‡∏î‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
// ... (‡πÇ‡∏Ñ‡πâ‡∏î‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
import JSZip from 'jszip';
import { saveAs } from 'file-saver';

const [emailStatusFilter, setEmailStatusFilter] = useState('');
const [startDate, setStartDate] = useState('');
const [endDate, setEndDate] = useState('');
const [selectedEmails, setSelectedEmails] = useState<string[]>([]);

const isInRange = (timestamp: string) => {
  if (!startDate && !endDate) return true;
  const date = new Date(timestamp);
  return (!startDate || new Date(startDate) <= date) && (!endDate || date <= new Date(endDate));
};

const emailLogs = (client.emails || []).filter(email =>
  (!emailStatusFilter || email.status === emailStatusFilter) &&
  isInRange(email.timestamp)
);

const paginatedEmails = emailLogs.slice((emailPage - 1) * itemsPerPage, emailPage * itemsPerPage);

const exportEmailZip = async () => {
  const zip = new JSZip();

  // CSV
  const csv = [['Type', 'To', 'Status', 'Timestamp'].join(',')];
  emailLogs.forEach(email => {
    csv.push([
      email.type,
      email.to,
      email.status,
      new Date(email.timestamp).toLocaleString()
    ].map(v => `"${v}"`).join(','));
  });
  zip.file('email_logs.csv', csv.join('\n'));

  // Dummy PDF content per email
  emailLogs.forEach(email => {
    zip.file(`pdf/${email.messageId}.pdf`, `PDF content for ${email.to}\nStatus: ${email.status}`);
  });

  const content = await zip.generateAsync({ type: 'blob' });
  saveAs(content, 'email_logs.zip');
};

const bulkRetry = async () => {
  const reason = prompt('Reason for retry selected emails:');
  if (!reason || selectedEmails.length === 0) return;
  await Promise.all(selectedEmails.map(messageId => fetch('/api/email/retry', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ messageId, reason })
  })));
  alert('Retry sent for selected emails');
};

{/* UI Block */}
<div className="flex gap-2 items-center">
  <select
    value={emailStatusFilter}
    onChange={(e) => { setEmailStatusFilter(e.target.value); setEmailPage(1); }}
    className="text-sm border px-2 py-1 rounded"
  >
    <option value="">All Status</option>
    <option value="Sent">Sent</option>
    <option value="Failed">Failed</option>
    <option value="Opened">Opened</option>
    <option value="Clicked">Clicked</option>
    <option value="Retried">Retried</option>
  </select>
  <input type="date" value={startDate} onChange={(e) => setStartDate(e.target.value)} className="text-sm border px-2 py-1 rounded" />
  <input type="date" value={endDate} onChange={(e) => setEndDate(e.target.value)} className="text-sm border px-2 py-1 rounded" />
  <button onClick={exportEmailZip} className="text-sm bg-gray-100 hover:bg-gray-200 border rounded px-3 py-1">Export ZIP</button>
  <button disabled={selectedEmails.length === 0} onClick={bulkRetry} className="text-sm bg-orange-100 hover:bg-orange-200 border rounded px-3 py-1">Retry Selected</button>
</div>

{/* Inside table */}
<input
  type="checkbox"
  checked={selectedEmails.includes(email.messageId)}
  onChange={(e) => {
    setSelectedEmails(prev =>
      e.target.checked ? [...prev, email.messageId] : prev.filter(id => id !== email.messageId)
    );
  }}
/>

// ... (‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
const [servicesTab, setServicesTab] = useState<'services' | 'emails'>('services');
const [emailPage, setEmailPage] = useState(1);
const [statusFilter, setStatusFilter] = useState('');
const itemsPerPage = 5;

const emailLogs = (client.emails || []).filter((email: any) =>
  !statusFilter || email.status === statusFilter
);

const paginatedEmails = emailLogs.slice((emailPage - 1) * itemsPerPage, emailPage * itemsPerPage);

const exportEmailCSV = () => {
  const csv = [
    ['Type', 'To', 'Status', 'Timestamp'].join(',')
  ];
  emailLogs.forEach(email => {
    csv.push([
      email.type,
      email.to,
      email.status,
      new Date(email.timestamp).toLocaleString()
    ].map(v => `"${v}"`).join(','));
  });
  const blob = new Blob([csv.join('\n')], { type: 'text/csv' });
  const url = URL.createObjectURL(blob);
  const link = document.createElement('a');
  link.href = url;
  link.download = 'email_logs.csv';
  link.click();
};

const retryEmail = async (messageId: string) => {
  const reason = prompt('Enter reason for retry:');
  if (!reason) return;
  try {
    await fetch('/api/email/retry', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ messageId, reason })
    });
    alert('Retry requested');
  } catch (err) {
    alert('Retry failed');
  }
};

{servicesTab === 'emails' && (
  <div className="overflow-x-auto space-y-3">
    <div className="flex justify-between items-center">
      <div className="text-sm font-medium">Total: {emailLogs.length} emails</div>
      <div className="flex items-center space-x-2">
        <select
          value={statusFilter}
          onChange={(e) => setStatusFilter(e.target.value)}
          className="text-sm border rounded px-2 py-1"
        >
          <option value="">All</option>
          <option value="sent">Sent</option>
          <option value="failed">Failed</option>
          <option value="retry">Retried</option>
        </select>
        <button
          onClick={exportEmailCSV}
          className="text-sm bg-gray-100 hover:bg-gray-200 border rounded px-3 py-1"
        >Export CSV</button>
      </div>
    </div>
    <table className="w-full text-sm border">
      <thead>
        <tr className="bg-gray-100 text-left">
          <th className="p-2 border">Type</th>
          <th className="p-2 border">To</th>
          <th className="p-2 border">Status</th>
          <th className="p-2 border">Date</th>
          <th className="p-2 border">Actions</th>
        </tr>
      </thead>
      <tbody>
        {paginatedEmails.map((email: any, i: number) => (
          <tr key={i} className="border-t">
            <td className="p-2 border">{email.type}</td>
            <td className="p-2 border">{email.to}</td>
            <td className="p-2 border">
              {email.status}
              {email.status === 'retry' && <span className="ml-1">üîÅ</span>}
            </td>
            <td className="p-2 border">{new Date(email.timestamp).toLocaleString()}</td>
            <td className="p-2 border space-x-2">
              <Link href={`/admin/email/${email.messageId}`} className="text-blue-600 underline">View</Link>
              <button onClick={() => retryEmail(email.messageId)} className="text-orange-600 underline">Retry</button>
            </td>
          </tr>
        ))}
      </tbody>
    </table>
    <div className="flex justify-between text-sm mt-2">
      <button disabled={emailPage === 1} onClick={() => setEmailPage(emailPage - 1)} className="px-3 py-1 rounded border bg-white disabled:opacity-50">‚Üê Prev</button>
      <div>Page {emailPage} of {Math.ceil(emailLogs.length / itemsPerPage)}</div>
      <button disabled={emailPage * itemsPerPage >= emailLogs.length} onClick={() => setEmailPage(emailPage + 1)} className="px-3 py-1 rounded border bg-white disabled:opacity-50">Next ‚Üí</button>
    </div>
  </div>
)
