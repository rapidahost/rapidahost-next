import { NextRequest, NextResponse } from 'next/server';
import { getRetryQueue, clearRetryQueue } from '@/lib/retryQueue';
import axios from 'axios';
import { logger } from '@/lib/logger';

export async function POST(req: NextRequest) {
  const cronSecret = req.headers.get('x-cron-secret');

  if (cronSecret !== process.env.CRON_SECRET) {
    await logger.warn('üõ°Ô∏è Unauthorized retry-email attempt', {
      ip: req.ip || req.headers.get('x-forwarded-for'),
    });
    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
  }

  const queue = await getRetryQueue();
  if (!queue.length) {
    await logger.info('üì≠ Retry queue empty');
    return NextResponse.json({ message: 'No retries needed' }, { status: 200 });
  }

  const results = [];

  for (const item of queue) {
    try {
      const res = await axios.post(`${process.env.LOCAL_API_BASE_URL}/api/send-email`, {
        clientId: item.clientId,
        invoiceId: item.invoiceId,
        serviceId: item.serviceId,
        retry: true,
      });

      results.push({ ...item, status: 'success' });
      await logger.info('‚úÖ Retry email succeeded', item);
    } catch (err: any) {
      results.push({ ...item, status: 'failed', error: err.message });
      await logger.error('‚ùå Retry email failed', {
        item,
        error: err.message,
      });
    }
  }

  await clearRetryQueue();
  return NextResponse.json({ retried: results }, { status: 200 });
}
